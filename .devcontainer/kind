#!/bin/bash

if kind get clusters -q | grep crossplane; then
  kind export kubeconfig --name crossplane
  exit 0
fi

# shellcheck source=/dev/null
source credentials

cat <<EOF | kind create cluster --name crossplane --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  podSubnet: "10.95.0.0/16"
  serviceSubnet: "10.96.0.0/12"
  disableDefaultCNI: true
nodes:
- role: control-plane
  kubeadmConfigPatches:
    - |
      kind: InitConfiguration
      nodeRegistration:
        kubeletExtraArgs:
          node-labels: "ingress-ready=true"
  extraPortMappings:
    - containerPort: 443
      hostPort: 443
    - containerPort: 80
      hostPort: 80
- role: worker
- role: worker
- role: worker
EOF

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/tigera-operator.yaml

cat << EOF | kubectl create -f-
# This section includes base Calico installation configuration.
# For more information, see: https://projectcalico.docs.tigera.io/master/reference/installation/api#operator.tigera.io/v1.Installation
apiVersion: operator.tigera.io/v1
kind: Installation
metadata:
  name: default
spec:
  # Configures Calico networking.
  calicoNetwork:
    # Note: The ipPools section cannot be modified post-install.
    ipPools:
    - blockSize: 26
      cidr: 10.95.0.0/16
      encapsulation: VXLANCrossSubnet
      natOutgoing: Enabled
      nodeSelector: all()

---

# This section configures the Calico API server.
# For more information, see: https://projectcalico.docs.tigera.io/master/reference/installation/api#operator.tigera.io/v1.APIServer
apiVersion: operator.tigera.io/v1
kind: APIServer 
metadata: 
  name: default 
spec: {}
EOF

kubectl wait --for condition=ready pod --namespace kube-system --all


kubectl -n crossplane-system create sa kubernetes-helm

kubectl create ns bitwarden

cat << EOF | kubectl apply -f-
apiVersion: v1
stringData:
  BW_CLIENTID: "$bitwardenClientId"
  BW_CLIENTSECRET: "$bitwardenClientSecret"
  BW_HOST: "$bitwardenHost"
  BW_PASSWORD: "$bitwardenPassword"
kind: Secret
metadata:
  name: bitwarden-cli
  namespace: bitwarden
type: Opaque
EOF

helm upgrade --install argocd-management-local -n argocd --create-namespace -f ../apps/lib/base/argocd/values.yaml argo/argo-cd --wait